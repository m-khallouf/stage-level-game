// <copyright file="GameManager.cs" company="YourCompanyName">
// Copyright (c) YourCompanyName. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
// </copyright>
// <autogenerated/>
namespace Project1
{
    using System;
    using System.Collections.Generic;
    using System.Security.Cryptography.X509Certificates;
    using Microsoft.Xna.Framework;
    using Microsoft.Xna.Framework.Graphics;
    using Microsoft.Xna.Framework.Input;
    using Project1.Entities;
    using System.Diagnostics;
    using System.Reflection.Metadata;
    using Microsoft.Xna.Framework.Content;
    using Project1.Levels;

    public class GameManager : Game
    {
        private GraphicsDeviceManager graphics;
        private SpriteBatch spriteBatch;

        public static int ScreenWidth { get; set; }
        public static int ScreenHeight { get; set; }
        private int screenWidth = 1280;
        private int screenHeight = 720;


        private InputManager inputManager;
        private ScreenManager screenManager;
        private GameOverScreen gameOverScreen;
        private LevelCompleteScreen levelCompleteScreen;
        private MainMenu mainMenu;
        private LevelManager levelManager;
        private Obstacle obstacle;
        private Player player;
        private Platform platform;
        private ILevel firstLevel;
        private ILevel secondLevel;
        private ILevel thirdLevel;

        private SpriteFont gameFont;

        // Field for the square texture

        public GameManager(bool v)
        {
            this.graphics = new GraphicsDeviceManager(this);
            this.Content.RootDirectory = "Content";
            this.IsMouseVisible = true;
            Instance = this;
        }

        public static GameManager Instance { get; private set; }
        public float DistanceThreshold { get; private set; }

        // Add your initialization logic here
        protected override void Initialize()
        {
            this.graphics.PreferredBackBufferWidth = this.screenWidth;
            this.graphics.PreferredBackBufferHeight = this.screenHeight;
            ScreenWidth = this.screenWidth;
            ScreenHeight = this.screenHeight;

            this.platform = new Platform(this.Content);
            this.graphics.ApplyChanges();
            this.inputManager = new InputManager();
            this.obstacle = new Obstacle(this.Content);
            this.player = new Player(Content, new Vector2(0, 566), inputManager, new Vector2(0, 566), obstacle);
            this.gameOverScreen = new GameOverScreen(Content, gameFont, inputManager);
            this.levelCompleteScreen = new LevelCompleteScreen(Content, gameFont, inputManager, player);
            this.firstLevel = new FirstLevel(this.Content, inputManager, player, levelCompleteScreen, obstacle);
            this.secondLevel = new SecondLevel(this.Content, inputManager, player, levelCompleteScreen, obstacle);
            this.thirdLevel = new ThirdLevel(this.Content, inputManager, player, levelCompleteScreen, obstacle);

            base.Initialize();
        }

        // use this.Content to load your game content here
        protected override void LoadContent()
        {
            this.spriteBatch = new SpriteBatch(this.GraphicsDevice);

            gameFont = this.Content.Load<SpriteFont>("font");

            // inputManager.GroundLevel = characterTexture.Height;

            mainMenu = new MainMenu(Content, gameFont, inputManager);
            levelManager = new LevelManager(Content, gameFont, inputManager);
            screenManager = new ScreenManager(GraphicsDevice, Content, gameFont, inputManager, platform, player, obstacle);
        }

        // Add your update logic here
        protected override void Update(GameTime gameTime)
        {
            if (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed || Keyboard.GetState().IsKeyDown(Keys.Escape))
            {
                this.Exit();
            }

            MouseState mouseState = Mouse.GetState();
           

            inputManager.Update(gameTime, mouseState);
            screenManager.Update(gameTime, mouseState);

            base.Update(gameTime);
        }

        // Add your drawing code here
        protected override void Draw(GameTime gameTime)
        {
            screenManager.Draw();

            base.Draw(gameTime);
        }
    }
}